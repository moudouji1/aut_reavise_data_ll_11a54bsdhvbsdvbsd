{
  "title": "üü† S√©ance 3 : Node.js et Express.js, Introduction √† Node.js, cr√©ation d‚Äôun serveur",
  "nodes": [
    {
      "title": "### Introduction g√©n√©rale",
      "children": [
        {
          "title": "Technologies web",
          "children": [
            {
              "title": "HTML : Contenu et structure"
            },
            {
              "title": "CSS : Apparence et style"
            },
            {
              "title": "JavaScript : Interactivit√©"
            }
          ]
        },
        {
          "title": "Architecture d'une application web",
          "children": [
            {
              "title": "Partie Frontend (Client) : HTML, CSS, JavaScript"
            },
            {
              "title": "Partie Backend (Serveur) : Node.js, PHP, JEE, .Net"
            },
            {
              "title": "Communication via le protocole HTTP"
            }
          ]
        }
      ]
    },
    {
      "title": "### Comprendre Node.js",
      "children": [
        {
          "title": "Qu'est-ce que Node.js ?",
          "children": [
            {
              "title": "Environnement d'ex√©cution JavaScript c√¥t√© serveur"
            },
            {
              "title": "Bas√© sur les √©v√®nements, non bloquant (asynchrone)"
            },
            {
              "title": "Performant gr√¢ce √† son unique thread et sa boucle d'√©v√©nements"
            }
          ]
        },
        {
          "title": "Les possibilit√©s de NodeJS",
          "children": [
            {
              "title": "Serveurs et sites web complexes"
            },
            {
              "title": "APIs"
            },
            {
              "title": "Applications console et outils en ligne de commande"
            },
            {
              "title": "Services r√©seau sur mesure (Proxies, etc.)"
            },
            {
              "title": "Applications avec interface graphique (GUI)"
            },
            {
              "title": "Support des sockets pour la communication temps r√©el"
            }
          ]
        },
        {
          "title": "Pr√©requis",
          "children": [
            {
              "title": "Connaissance de base en Javascript"
            },
            {
              "title": "Connaissance en asynchrone et architecture 'event-driven'"
            },
            {
              "title": "Connaissance des modules natifs de NodeJS"
            }
          ]
        },
        {
          "title": "Ressources",
          "children": [
            {
              "title": "NodeJS API : https://nodejs.org/api/"
            },
            {
              "title": "Projets sur Github"
            },
            {
              "title": "Stackoverflow"
            }
          ]
        }
      ]
    },
    {
      "title": "### Installation et premi√®re application",
      "children": [
        {
          "title": "T√©l√©charger et installer Node.js (Windows, Mac, Linux)"
        },
        {
          "title": "V√©rifier l'installation avec une application 'Hello World'"
        },
        {
          "title": "Cr√©er une premi√®re application bas niveau",
          "children": [
            {
              "title": "G√©rer manuellement les requ√™tes HTTP"
            },
            {
              "title": "Utiliser les callbacks pour les op√©rations asynchrones"
            }
          ]
        }
      ]
    },
    {
      "title": "### Side Project : ChatWithMe",
      "children": [
        {
          "title": "Objectif : D√©velopper une base solide d'un chat en ligne"
        },
        {
          "title": "D√©veloppement par √©tapes",
          "children": [
            {
              "title": "1. Le serveur web"
            },
            {
              "title": "2. La communication en temps r√©el"
            },
            {
              "title": "3. La sauvegarde des donn√©es"
            },
            {
              "title": "4. Le monitoring de l'application"
            }
          ]
        }
      ]
    },
    {
      "title": "### HTTP et le module 'Request'",
      "children": [
        {
          "title": "Le module natif 'http'",
          "children": [
            {
              "title": "Requ√™te HTTP (partie client) : Exercice GET et POST"
            },
            {
              "title": "Serveur HTTP (partie serveur) : Exercice de cr√©ation de serveur et gestion de routes"
            },
            {
              "title": "Constat : Difficult√© de cr√©er un serveur complet avec le module natif"
            }
          ]
        },
        {
          "title": "Le module 'Request'",
          "children": [
            {
              "title": "D√©finition : Abstraction simple des modules natifs HTTP/HTTPS"
            },
            {
              "title": "Fonctionnalit√©s : Redirections, gestion des events/stream"
            },
            {
              "title": "Exercice : Envoyer des requ√™tes GET et POST avec 'request'"
            }
          ]
        }
      ]
    },
    {
      "title": "### Introduction √† Express.js",
      "children": [
        {
          "title": "Qu'est-ce qu'Express ?",
          "children": [
            {
              "title": "Infrastructure web minimaliste, souple et rapide pour Node.js"
            },
            {
              "title": "Fournit des fonctionnalit√©s robustes pour applications web et mobiles"
            },
            {
              "title": "Simplifie la cr√©ation d'API gr√¢ce aux utilitaires HTTP et middlewares"
            }
          ]
        },
        {
          "title": "Installation et premier serveur",
          "children": [
            {
              "title": "Initialisation du projet : npm init"
            },
            {
              "title": "Installation d'Express : npm install --save express"
            },
            {
              "title": "Exemple de code 'Hello world'"
            }
          ]
        },
        {
          "title": "Le 'Generator'",
          "children": [
            {
              "title": "D√©finition : Outil pour cr√©er rapidement un squelette d'application Express"
            },
            {
              "title": "Utilisation",
              "children": [
                {
                  "title": "Installation globale : npm install express-generator -g"
                },
                {
                  "title": "G√©n√©ration du projet : express myapp"
                },
                {
                  "title": "Installation des d√©pendances : npm install"
                },
                {
                  "title": "Lancement du serveur : npm start"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "### Le routage avec Express",
      "children": [
        {
          "title": "D√©finir une route",
          "children": [
            {
              "title": "Syntaxe : app.METHOD(PATH, HANDLER)"
            },
            {
              "title": "Utilisation de Regex dans le path"
            },
            {
              "title": "Cha√Ænage des routes"
            },
            {
              "title": "Modularisation avec express.Router (mini-app)"
            }
          ]
        },
        {
          "title": "Le gestionnaire des routes (middlewares de route)",
          "children": [
            {
              "title": "Principe : Fournir plusieurs fonctions callback pour une m√™me route"
            },
            {
              "title": "M√©canisme : Utiliser next() pour passer √† la fonction suivante"
            },
            {
              "title": "Cas d'usage : Pr√©conditions (authentification, autorisation)"
            }
          ]
        }
      ]
    },
    {
      "title": "### Les Middlewares dans Express",
      "children": [
        {
          "title": "Qu'est-ce qu'un middleware ?",
          "children": [
            {
              "title": "D√©finition : Une fonction avec les arguments (req, res, next)"
            },
            {
              "title": "R√¥le : Ex√©cuter du code, modifier req/res, terminer le cycle ou appeler le middleware suivant"
            },
            {
              "title": "Attention : L'ordre d'appel des middlewares est crucial"
            }
          ]
        },
        {
          "title": "Types de middlewares",
          "children": [
            {
              "title": "Logger : Afficher des informations sur la requ√™te"
            },
            {
              "title": "Time : Ajouter des informations (ex: timestamp) √† la requ√™te"
            },
            {
              "title": "Authentification (OAuth, etc.)"
            },
            {
              "title": "Parsing de body (pour requ√™tes POST)"
            }
          ]
        },
        {
          "title": "Gestion des fichiers statiques",
          "children": [
            {
              "title": "Utilisation de `express.static('public')`"
            },
            {
              "title": "Possibilit√© de d√©finir plusieurs r√©pertoires statiques"
            },
            {
              "title": "D√©finir un chemin virtuel : `app.use('/static', express.static('public'))`"
            }
          ]
        }
      ]
    },
    {
      "title": "### L'asynchrone : Promesses et Modules I/O",
      "children": [
        {
          "title": "Les promesses (Promises)",
          "children": [
            {
              "title": "Alternative aux callbacks"
            },
            {
              "title": "√âtats : Accomplie (fulfilled), Rejet√©e (rejected)"
            },
            {
              "title": "Exercices : `promise-it-wont-hurt`"
            }
          ]
        },
        {
          "title": "Modules I/O avec la biblioth√®que Q",
          "children": [
            {
              "title": "Fonctions utiles : Q.nfcall, Q.npost, etc."
            },
            {
              "title": "Permet de 'promisifier' des fonctions bas√©es sur les callbacks"
            }
          ]
        }
      ]
    },
    {
      "title": "### Communication temps r√©el avec Socket.io",
      "children": [
        {
          "title": "Historique de la communication web",
          "children": [
            {
              "title": "Ancienne m√©thode : Rafra√Æchissement p√©riodique (polling)"
            },
            {
              "title": "Am√©lioration : Long-polling (connexion maintenue)"
            },
            {
              "title": "Solution moderne : WebSockets"
            }
          ]
        },
        {
          "title": "Socket.io",
          "children": [
            {
              "title": "Biblioth√®que pour la communication temps r√©el bi-directionnelle"
            },
            {
              "title": "Mise en ≈ìuvre : C√¥t√© serveur (Node.js) et c√¥t√© client (navigateur)"
            }
          ]
        }
      ]
    }
  ]
}