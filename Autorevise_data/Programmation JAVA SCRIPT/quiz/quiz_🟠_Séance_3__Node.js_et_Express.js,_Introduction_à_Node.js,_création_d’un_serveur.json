{
  "title": "üü† S√©ance 3 : Node.js et Express.js, Introduction √† Node.js, cr√©ation d‚Äôun serveur",
  "questions": [
    {
      "question": "Selon le contenu, qu'est-ce qu'Express.js ?",
      "options": [
        "Un langage de programmation qui remplace JavaScript.",
        "Une base de donn√©es optimis√©e pour Node.js.",
        "Une infrastructure web minimaliste, souple et rapide pour Node.js.",
        "Un outil pour installer Node.js sur un serveur."
      ],
      "answer": "Une infrastructure web minimaliste, souple et rapide pour Node.js.",
      "explanation": "Le document d√©crit Express comme une 'infrastructure web minimaliste, souple et rapide pour Node.JS' qui fournit un ensemble de fonctionnalit√©s pour les applications web et mobiles."
    },
    {
      "question": "Quelle commande est utilis√©e pour cr√©er rapidement un squelette de projet Express avec le 'Generator' ?",
      "options": [
        "npm init express-app",
        "node new myapp",
        "express myapp",
        "npm start myapp"
      ],
      "answer": "express myapp",
      "explanation": "Apr√®s avoir install√© le g√©n√©rateur globalement (`npm install express-generator -g`), la commande `express myapp` est utilis√©e pour g√©n√©rer un nouveau projet."
    },
    {
      "question": "Qu'est-ce qu'un 'middleware' dans le contexte d'Express ?",
      "options": [
        "Une base de donn√©es stock√©e au milieu du serveur.",
        "Un fichier de configuration pour les routes.",
        "Une fonction qui a acc√®s aux objets de requ√™te (req), de r√©ponse (res) et √† la fonction suivante (next).",
        "Un type de route sp√©cifique pour les API."
      ],
      "answer": "Une fonction qui a acc√®s aux objets de requ√™te (req), de r√©ponse (res) et √† la fonction suivante (next).",
      "explanation": "Un middleware est une fonction qui s'ex√©cute durant le cycle de vie d'une requ√™te. Elle peut modifier les objets req et res, terminer le cycle ou passer le contr√¥le au middleware suivant avec la fonction `next()`."
    },
    {
      "question": "Que se passe-t-il si une fonction middleware n'appelle pas `next()` et ne termine pas le cycle de r√©ponse ?",
      "options": [
        "Le serveur renvoie automatiquement une erreur 500.",
        "La requ√™te reste bloqu√©e et le client n'obtient jamais de r√©ponse.",
        "Le middleware suivant est appel√© par d√©faut.",
        "Express passe √† la route suivante."
      ],
      "answer": "La requ√™te reste bloqu√©e et le client n'obtient jamais de r√©ponse.",
      "explanation": "Le document pr√©cise : 'Une fonction middleware doit appeler la fonction next() pour transmettre le contr√¥le √† la fonction middleware suivante. Sinon, la demande restera bloqu√©e.'"
    },
    {
      "question": "Comment d√©finir une route basique pour une requ√™te GET sur le chemin '/users' en Express ?",
      "options": [
        "app.get('/users', handlerFunction);",
        "app.route('/users', 'GET', handlerFunction);",
        "app.on('GET', '/users', handlerFunction);",
        "app.listen('/users', handlerFunction);"
      ],
      "answer": "app.get('/users', handlerFunction);",
      "explanation": "La syntaxe de base pour d√©finir une route dans Express est `app.METHOD(PATH, HANDLER)`, o√π METHOD est la m√©thode HTTP (comme `get`, `post`, etc.)."
    },
    {
      "question": "Quelle m√©thode est utilis√©e pour servir des fichiers statiques (images, CSS, JavaScript) depuis un dossier 'public' ?",
      "options": [
        "app.files('public');",
        "app.use(express.static('public'));",
        "app.serveStatic('public');",
        "app.load('public');"
      ],
      "answer": "app.use(express.static('public'));",
      "explanation": "Pour servir des fichiers statiques, il faut utiliser le middleware int√©gr√© `express.static`. La syntaxe correcte est `app.use(express.static('nom_du_dossier'));`."
    },
    {
      "question": "Quelle est la principale caract√©ristique de l'architecture de Node.js mentionn√©e dans le cours ?",
      "options": [
        "Multi-thread et synchrone.",
        "Bas√©e sur les √©v√©nements et non-bloquante.",
        "Ex√©cution parall√®le de plusieurs processus lourds.",
        "Compil√©e en code machine avant ex√©cution."
      ],
      "answer": "Bas√©e sur les √©v√©nements et non-bloquante.",
      "explanation": "Le texte indique que 'Node.js est un environnement de d√©veloppement JavaScript bas√© sur les √©v√®nements' et que 'aucune op√©ration n'est bloquante', ce qui est la d√©finition d'une architecture non-bloquante et √©v√©nementielle."
    },
    {
      "question": "Quelle biblioth√®que est mentionn√©e pour la communication en temps r√©el, se pr√©sentant comme une am√©lioration du 'long polling' ?",
      "options": [
        "HTTP.js",
        "Request",
        "Axios",
        "Socket.io"
      ],
      "answer": "Socket.io",
      "explanation": "Le document pr√©sente l'historique de la communication web (polling, long polling) et introduit `Socket.io` comme la solution moderne pour la communication en temps r√©el s'appuyant sur les WebSockets."
    }
  ]
}