{
  "title": "üü§ Autres",
  "questions": [
    {
      "question": "Quel est le r√¥le principal de la classe R.java dans un projet Android ?",
      "options": [
        "Elle contient la logique m√©tier de l'application.",
        "Elle est √©crite manuellement pour d√©finir les ressources.",
        "Elle est g√©n√©r√©e automatiquement et fournit des identifiants uniques pour toutes les ressources du projet.",
        "Elle g√®re les connexions r√©seau de l'application."
      ],
      "answer": "Elle est g√©n√©r√©e automatiquement et fournit des identifiants uniques pour toutes les ressources du projet.",
      "explanation": "La classe R.java est g√©n√©r√©e automatiquement par le SDK Android. Elle contient des identifiants statiques pour toutes les ressources (layouts, strings, drawables, etc.) du projet, permettant d'y acc√©der de mani√®re programmatique dans le code Java."
    },
    {
      "question": "Que se passe-t-il par d√©faut lorsqu'un utilisateur tourne l'√©cran d'un appareil Android ?",
      "options": [
        "L'activit√© est mise en pause puis red√©marr√©e.",
        "Seule la m√©thode onResume() est appel√©e.",
        "L'activit√© est d√©truite puis recr√©√©e.",
        "Rien, l'affichage s'adapte sans changer l'√©tat de l'activit√©."
      ],
      "answer": "L'activit√© est d√©truite puis recr√©√©e.",
      "explanation": "Un changement d'orientation est un changement de configuration. Par d√©faut, Android d√©truit l'activit√© en cours et la recr√©e pour charger les ressources appropri√©es (par exemple, un layout diff√©rent pour le mode paysage)."
    },
    {
      "question": "Pourquoi est-il crucial de ne pas effectuer d'op√©rations longues (comme des requ√™tes r√©seau) sur le thread principal (UI thread) ?",
      "options": [
        "Pour √©conomiser la batterie de l'appareil.",
        "Pour √©viter de bloquer l'interface utilisateur, ce qui peut provoquer une erreur de type \"Application Not Responding\" (ANR).",
        "Parce que le thread principal n'a pas les permissions n√©cessaires.",
        "Pour des raisons de s√©curit√© et d'isolation des donn√©es."
      ],
      "answer": "Pour √©viter de bloquer l'interface utilisateur, ce qui peut provoquer une erreur de type \"Application Not Responding\" (ANR).",
      "explanation": "Le thread principal est responsable de la gestion de l'interface utilisateur. Toute op√©ration longue le bloquera, rendant l'application non r√©active et pouvant entra√Æner une erreur ANR affich√©e √† l'utilisateur."
    },
    {
      "question": "Quel est l'objectif principal d'un Intent en d√©veloppement Android ?",
      "options": [
        "Stocker des donn√©es de mani√®re persistante.",
        "D√©finir la mise en page d'une interface graphique.",
        "Agir comme un objet de messagerie pour demander une action √† un autre composant de l'application (comme d√©marrer une autre activit√©).",
        "Compiler le code Java en bytecode Dalvik."
      ],
      "answer": "Agir comme un objet de messagerie pour demander une action √† un autre composant de l'application (comme d√©marrer une autre activit√©).",
      "explanation": "Un Intent est un objet de messagerie que vous pouvez utiliser pour demander une action √† un autre composant d'application. Il facilite la communication entre les activit√©s, services et broadcast receivers."
    },
    {
      "question": "Quelle est la principale diff√©rence entre un `LinearLayout` et un `RelativeLayout` ?",
      "options": [
        "LinearLayout ne peut contenir que du texte, tandis que RelativeLayout peut contenir des images.",
        "LinearLayout arrange les vues en une seule direction (horizontale ou verticale), tandis que RelativeLayout positionne les vues les unes par rapport aux autres ou par rapport au parent.",
        "LinearLayout est utilis√© pour les tablettes et RelativeLayout pour les t√©l√©phones.",
        "LinearLayout est d√©fini en Java et RelativeLayout en XML."
      ],
      "answer": "LinearLayout arrange les vues en une seule direction (horizontale ou verticale), tandis que RelativeLayout positionne les vues les unes par rapport aux autres ou par rapport au parent.",
      "explanation": "LinearLayout est utilis√© pour des mises en page simples, alignant les √©l√©ments enfants en ligne ou en colonne. RelativeLayout offre plus de flexibilit√© en permettant de positionner les √©l√©ments en fonction de relations spatiales complexes."
    },
    {
      "question": "Quel m√©canisme est le plus appropri√© pour sauvegarder des donn√©es simples de configuration utilisateur (pr√©f√©rences), comme un r√©glage \"mode sombre\" ?",
      "options": [
        "Une base de donn√©es SQLite.",
        "Un fichier texte brut dans le stockage interne.",
        "Un `ContentProvider`.",
        "Les `SharedPreferences`."
      ],
      "answer": "Les `SharedPreferences`.",
      "explanation": "Les SharedPreferences sont sp√©cifiquement con√ßues pour stocker des paires cl√©-valeur de types de donn√©es primitifs. C'est la solution la plus simple et efficace pour g√©rer les pr√©f√©rences utilisateur."
    },
    {
      "question": "Quel est le r√¥le du `ViewHolder` dans l'optimisation d'une `ListView` ?",
      "options": [
        "G√©rer les clics sur les √©l√©ments de la liste.",
        "√âviter les appels r√©p√©t√©s et co√ªteux √† `findViewById()` en mettant en cache les r√©f√©rences des vues d'un item.",
        "D√©finir le style CSS de chaque ligne de la liste.",
        "Charger les donn√©es depuis une base de donn√©es."
      ],
      "answer": "√âviter les appels r√©p√©t√©s et co√ªteux √† `findViewById()` en mettant en cache les r√©f√©rences des vues d'un item.",
      "explanation": "Le pattern ViewHolder am√©liore consid√©rablement les performances d'une ListView en stockant les r√©f√©rences des sous-vues d'une ligne. Ainsi, lors du recyclage des vues, il n'est pas n√©cessaire de les rechercher √† nouveau avec `findViewById()`."
    },
    {
      "question": "Quel est le format final d'une application Android pr√™te √† √™tre install√©e et quel est le format de son code ex√©cutable ?",
      "options": [
        "Un fichier .ZIP contenant des fichiers .JAR",
        "Un fichier .APK contenant des fichiers .DEX",
        "Un fichier .APP contenant du code machine ARM",
        "Un fichier .EXE contenant des fichiers .DLL"
      ],
      "answer": "Un fichier .APK contenant des fichiers .DEX",
      "explanation": "Les outils de build Android compilent le code source en fichiers .dex (Dalvik Executable). Ces fichiers, ainsi que les ressources de l'application, sont ensuite empaquet√©s dans un fichier .apk (Android Package), qui est l'archive distribuable et installable."
    },
    {
      "question": "Quel est le but de la classe `AsyncTask` en Android ?",
      "options": [
        "Ex√©cuter des op√©rations en arri√®re-plan et publier les r√©sultats sur le thread UI sans avoir √† g√©rer les threads manuellement.",
        "G√©rer le cycle de vie d'une activit√©.",
        "Dessiner des √©l√©ments graphiques complexes √† l'√©cran.",
        "G√©rer les permissions de l'application."
      ],
      "answer": "Ex√©cuter des op√©rations en arri√®re-plan et publier les r√©sultats sur le thread UI sans avoir √† g√©rer les threads manuellement.",
      "explanation": "AsyncTask est con√ßue pour simplifier l'ex√©cution de t√¢ches asynchrones. Elle permet d'effectuer des op√©rations longues en arri√®re-plan (dans `doInBackground`) et de synchroniser facilement les r√©sultats avec le thread principal (dans `onPostExecute`)."
    }
  ]
}