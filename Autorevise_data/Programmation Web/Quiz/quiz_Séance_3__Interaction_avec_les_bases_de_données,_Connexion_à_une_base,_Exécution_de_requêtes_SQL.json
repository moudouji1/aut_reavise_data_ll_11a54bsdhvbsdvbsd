{
  "title": "Séance 3 : Interaction avec les bases de données, Connexion à une base, Exécution de requêtes SQL",
  "questions": [
    {
      "question": "Quelles sont les quatre fonctions essentielles pour manipuler une base de données en PHP, selon le document ?",
      "options": [
        "open, read, write, close",
        "start, commit, rollback, end",
        "connect, select_db, query, close",
        "create, update, delete, fetch"
      ],
      "answer": "connect, select_db, query, close",
      "explanation": "Le document identifie explicitement ces quatre fonctions (connexion au serveur, choix de la base, envoi de requête, et déconnexion) comme étant fondamentales pour l'interaction avec une base de données."
    },
    {
      "question": "Quelle est la principale différence entre une connexion persistante (pconnect) et une connexion non-persistante (connect) en PHP ?",
      "options": [
        "Elle est plus sécurisée.",
        "Elle permet d'exécuter des requêtes plus complexes.",
        "Elle ne se ferme pas à la fin du script et peut être réutilisée.",
        "Elle crypte automatiquement les données transmises."
      ],
      "answer": "Elle ne se ferme pas à la fin du script et peut être réutilisée.",
      "explanation": "D'après le document, une connexion persistante (pconnect) n'est pas fermée à la fin de l'exécution du script, ce qui permet à PHP de la réutiliser pour des requêtes ultérieures, améliorant ainsi les performances."
    },
    {
      "question": "Quelle fonction PHP est utilisée pour envoyer une requête SQL à une base de données MySQL ?",
      "options": [
        "mysql_send_sql()",
        "mysql_execute()",
        "mysql_query()",
        "mysql_run_query()"
      ],
      "answer": "mysql_query()",
      "explanation": "La fonction `mysql_query()` est la commande standard présentée dans le contenu pour exécuter des requêtes SQL (SELECT, INSERT, etc.) sur la base de données connectée."
    },
    {
      "question": "Quelle est une méthode recommandée pour gérer une erreur de connexion à la base de données et arrêter immédiatement le script ?",
      "options": [
        "Ignorer l'erreur et continuer l'exécution.",
        "Actualiser la page automatiquement.",
        "Stocker l'erreur dans un cookie pour un traitement ultérieur.",
        "Utiliser l'opérateur `or die()` pour afficher un message et terminer le script."
      ],
      "answer": "Utiliser l'opérateur `or die()` pour afficher un message et terminer le script.",
      "explanation": "Le document montre l'exemple `mysql_connect(...) or die(\"erreur\");` comme une méthode efficace pour interrompre l'exécution du script en cas d'échec de la connexion et pour informer l'utilisateur."
    },
    {
      "question": "Après avoir exécuté une requête `SELECT`, quelle fonction PHP est généralement utilisée dans une boucle pour récupérer chaque ligne du résultat ?",
      "options": [
        "mysql_get_result()",
        "mysql_fetch_row()",
        "mysql_fetch_all()",
        "mysql_read_line()"
      ],
      "answer": "mysql_fetch_row()",
      "explanation": "Le contenu explique que `mysql_fetch_row()` est utilisée, typiquement dans une boucle `while`, pour extraire une par une les lignes du jeu de résultats retourné par `mysql_query()`."
    },
    {
      "question": "Quel est l'attribut SQL qui permet d'incrémenter automatiquement la valeur d'une colonne de type entier à chaque nouvel enregistrement ?",
      "options": [
        "PRIMARY KEY",
        "UNIQUE",
        "NOT NULL",
        "AUTO_INCREMENT"
      ],
      "answer": "AUTO_INCREMENT",
      "explanation": "L'attribut `AUTO_INCREMENT` est spécifiquement conçu pour que la base de données assigne automatiquement une valeur numérique croissante à une colonne, généralement une clé primaire, lors de l'insertion d'une nouvelle ligne."
    },
    {
      "question": "Pour des raisons de bonne pratique, où est-il conseillé de stocker les variables de connexion à la base de données (hôte, utilisateur, mot de passe) ?",
      "options": [
        "Directement au début de chaque script qui en a besoin.",
        "Dans un fichier de configuration séparé et inclus avec l'instruction `include()`.",
        "Dans des cookies sur le navigateur du client.",
        "Dans une variable de session."
      ],
      "answer": "Dans un fichier de configuration séparé et inclus avec l'instruction `include()`.",
      "explanation": "Le document suggère de créer un script PHP dédié (par exemple `connexiondata.php`) contenant les variables de connexion et de l'inclure dans les autres scripts. Cela centralise la configuration et facilite la maintenance."
    },
    {
      "question": "Quelle commande SQL est utilisée pour supprimer une base de données entière ?",
      "options": [
        "DELETE DATABASE nom_bd",
        "ERASE DATABASE nom_bd",
        "REMOVE DATABASE nom_bd",
        "DROP DATABASE nom_bd"
      ],
      "answer": "DROP DATABASE nom_bd",
      "explanation": "Le document mentionne `DROP DATABASE [IF EXISTS] nom_bd` comme étant la commande SQL correcte pour supprimer définitivement une base de données."
    }
  ]
}