{
  "title": "Séance 4 : Programmation orientée objet (POO)",
  "nodes": [
    {
      "title": "Chapitre IV : Concepts de base (via Alice)",
      "children": [
        {
          "title": "Classe",
          "children": [
            {
              "title": "Le 'moule' pour créer des objets"
            },
            {
              "title": "Nom commence par une majuscule"
            }
          ]
        },
        {
          "title": "Instance",
          "children": [
            {
              "title": "Objet concret créé à partir d'une classe"
            },
            {
              "title": "Peut avoir sa 'propre vie' (attributs modifiés)"
            }
          ]
        },
        {
          "title": "Méthodes",
          "children": [
            {
              "title": "Actions que l'objet peut réaliser"
            },
            {
              "title": "World-Level Methods: communes à plusieurs classes"
            },
            {
              "title": "Class-Level Methods: spécifiques à une classe"
            },
            {
              "title": "Bonne pratique: décomposer le code en plusieurs méthodes"
            }
          ]
        },
        {
          "title": "Paramètres",
          "children": [
            {
              "title": "Rendent les méthodes réutilisables et flexibles"
            },
            {
              "title": "Exemple: méthode 'identification(personnage, nom)'"
            }
          ]
        },
        {
          "title": "Héritage",
          "children": [
            {
              "title": "Créer une nouvelle classe (enfant) à partir d'une instance modifiée"
            },
            {
              "title": "La classe enfant hérite des méthodes et attributs de la classe parent"
            }
          ]
        }
      ]
    },
    {
      "title": "Fondamentaux de la POO en Python",
      "children": [
        {
          "title": "Jargon de la POO",
          "children": [
            {
              "title": "Classe: Le plan, le moule"
            },
            {
              "title": "Objet / Instance: Exemplaire d'une classe"
            },
            {
              "title": "Attribut: Donnée ou variable de l'objet"
            },
            {
              "title": "Méthode: Fonction de l'objet (action)"
            }
          ]
        },
        {
          "title": "Les 4 Piliers de la POO",
          "children": [
            {
              "title": "Encapsulation: Regrouper données et méthodes dans un objet"
            },
            {
              "title": "Abstraction: Cacher la complexité, exposer l'essentiel"
            },
            {
              "title": "Héritage: Une classe enfant hérite des propriétés d'une classe parent"
            },
            {
              "title": "Polymorphisme: Un même nom de méthode pour des actions différentes selon la classe"
            }
          ]
        }
      ]
    },
    {
      "title": "La Classe en Python : Structure et Méthodes Spéciales",
      "children": [
        {
          "title": "Déclaration et Instanciation",
          "children": [
            {
              "title": "Déclaration: `class NomClasse:`"
            },
            {
              "title": "Instanciation: `mon_objet = NomClasse()`"
            }
          ]
        },
        {
          "title": "Constructeur __init__()",
          "children": [
            {
              "title": "Méthode spéciale appelée à la création de l'instance"
            },
            {
              "title": "Initialise les attributs: `self.nom = nom`"
            },
            {
              "title": "Paramètre `self` représente l'instance elle-même"
            }
          ]
        },
        {
          "title": "Méthodes Spéciales (Dunder Methods)",
          "children": [
            {
              "title": "Représentation: `__str__` (lisible) et `__repr__` (débogage)"
            },
            {
              "title": "Surcharge d'opérateurs: `__add__` (+), `__eq__` (==), `__mul__` (*)"
            },
            {
              "title": "Comportement de conteneur: `__len__`, `__getitem__`, `__setitem__`"
            },
            {
              "title": "Itération: `__iter__`, `__next__`"
            },
            {
              "title": "Cycle de vie: `__del__` (destructeur)"
            }
          ]
        }
      ]
    },
    {
      "title": "Encapsulation et Propriétés",
      "children": [
        {
          "title": "Accès aux attributs",
          "children": [
            {
              "title": "Getters/Setters : approche non-pythonique"
            },
            {
              "title": "Python favorise l'accès direct: `objet.attribut`"
            }
          ]
        },
        {
          "title": "Propriétés (property)",
          "children": [
            {
              "title": "Solution 'pythonique' pour contrôler l'accès"
            },
            {
              "title": "Utilisation de décorateurs: `@property` (getter), `@attribut.setter` (setter), `@attribut.deleter` (deleter)"
            },
            {
              "title": "Permet de valider les données tout en gardant une syntaxe simple"
            }
          ]
        }
      ]
    },
    {
      "title": "Héritage et Concepts Avancés",
      "children": [
        {
          "title": "Héritage",
          "children": [
            {
              "title": "Syntaxe: `class ClasseEnfant(ClasseParent):`"
            },
            {
              "title": "Appel à la classe mère: `super().__init__(...)`"
            }
          ]
        },
        {
          "title": "Types de méthodes",
          "children": [
            {
              "title": "Méthode d'instance: `def methode(self, ...)`"
            },
            {
              "title": "Méthode de classe: `@classmethod def methode(cls, ...)`"
            },
            {
              "title": "Méthode statique: `@staticmethod def methode(...)`"
            }
          ]
        },
        {
          "title": "Classes Abstraites",
          "children": [
            {
              "title": "Module `abc` (Abstract Base Class)"
            },
            {
              "title": "Forcent les classes filles à implémenter certaines méthodes (`@abstractmethod`)"
            }
          ]
        }
      ]
    },
    {
      "title": "Gestion des Exceptions",
      "children": [
        {
          "title": "Mécanisme `try...except`",
          "children": [
            {
              "title": "`try`: Bloc de code à surveiller"
            },
            {
              "title": "`except ErreurType as e:`: Gère l'erreur et la capture"
            },
            {
              "title": "Permet de gérer plusieurs types d'erreurs"
            }
          ]
        },
        {
          "title": "Lever une exception",
          "children": [
            {
              "title": "Mot-clé `raise`"
            },
            {
              "title": "Permet de créer ses propres conditions d'erreur"
            }
          ]
        },
        {
          "title": "Liste d'erreurs classiques",
          "children": [
            {
              "title": "IndentationError"
            },
            {
              "title": "IndexError / KeyError"
            },
            {
              "title": "NameError / SyntaxError"
            },
            {
              "title": "TypeError / ValueError"
            },
            {
              "title": "ZeroDivisionError"
            }
          ]
        }
      ]
    },
    {
      "title": "Cas Pratique : Programmer un Jeu d'Échecs",
      "children": [
        {
          "title": "Modélisation Orientée Objet",
          "children": [
            {
              "title": "Classe `Piece`: gère les pièces et leurs déplacements"
            },
            {
              "title": "Classe `Board`: gère l'échiquier et les règles"
            },
            {
              "title": "Classe `Engine`: implémente l'intelligence artificielle"
            }
          ]
        },
        {
          "title": "Concepts d'IA appliqués",
          "children": [
            {
              "title": "Arbre de jeu: Représentation des coups possibles"
            },
            {
              "title": "Algorithme Minimax: Choix du meilleur coup"
            },
            {
              "title": "Élagage Alpha-Bêta: Optimisation de la recherche"
            },
            {
              "title": "Fonction d'évaluation: Donner un score à une position"
            }
          ]
        }
      ]
    }
  ]
}